"Vim run command file
"--------------------
set encoding=utf-8
scriptencoding utf-8
set nocompatible
unlet! skip_defaults_vim
source ~/dotfiles/vim/fzf_functions.vim
source ~/dotfiles/vim/functions.vim
"
call plug#begin('~/.vim/plugged')
  "
  Plug 'tpope/vim-surround'
  Plug 'ervandew/supertab'
  Plug 'junegunn/fzf.vim'
  Plug 'Valloric/YouCompleteMe'
  Plug 'vim-airline/vim-airline'
  Plug 'tpope/vim-fugitive'
  Plug 'morhetz/gruvbox'
  Plug 'scrooloose/nerdtree'
  Plug 'tpope/vim-commentary'
  " Plug 'tpope/vim-repeat'
  " Plug 'majutsushi/tagbar'
  " Plug 'plytophogy/vim-virtualenv'
  " Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  "
call plug#end()
" Swap, Undo and Backup files
if exists('$SUDO_USER')
    set nobackup
    set noswapfile
    set nowritebackup
    set noundofile
else
    let g:netrw_home=$HOME.'/.config/'
    set directory=$HOME/.config/vimswap//
    set backupdir=$HOME/.config/vimswap//
    set viewdir=$HOME/.config/views//
    set undofile "poor man's version controll
endif

if has("persistent_undo")
    set undodir=$HOME/.config/vimswap//
    set undofile
endif
"
syntax on
filetype plugin indent on
set background=dark
colorscheme gruvbox
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_italicize_comments = 0
let g:gruvbox_invert_selection = 0
hi Visual       ctermfg=237 ctermbg=251
" hi VisualNOS    ctermfg=255 ctermbg=60

set number
" set relativenumber
set showmatch
set backspace=indent,eol,start
set clipboard=unnamed
" set laststatus=1

set autoindent
set expandtab
set shiftround
set shiftwidth=2
set smartindent
set softtabstop=2
set tabstop=2

" Folding setting
" set fdm=indent
" set nowrap
set wrap

set scrolloff=3
set shortmess=filnxtToOI
set nocursorline
set formatoptions+=1
set mouse=a

set path+=**
set wildmenu

set list
set listchars=nbsp:⦸
set listchars+=tab:▸\
set listchars+=tab:\ \
" set listchars+=eol:¬
set listchars+=extends:❯
set listchars+=precedes:❮
"set listchars+=trail:␣
set fillchars+=vert:\|

set nojoinspaces
set diffopt=filler,vertical
set splitright
set splitbelow
set omnifunc=syntaxcomplete#Complete
" set tags=tags;$HOME

if has('linebreak')
    set linebreak
    let &showbreak='↳ '
    "set breakindentopt=shift:2
endif

set visualbell t_vb=
set hidden
set autoread

" Search Settings
set hlsearch
set ignorecase
set smartcase
set incsearch

let mapleader ="\<Space>"
let maplocalleader = "\,"
vnoremap < <gv
vnoremap > >gv

" nnoremap j gj
" nnoremap k gk
nnoremap ^ g^
nnoremap 0 g0
nnoremap $ g$
" nnoremap gj j
" nnoremap gk k
nnoremap g^ ^
nnoremap g$ $
nnoremap g0 0

nnoremap <silent><leader>zz :call Trim_trailing()<cr>

nnoremap <leader>? :call <SID>goog(expand("<cWORD>"), 0)<cr>
nnoremap <leader>! :call <SID>goog(expand("<cWORD>"), 1)<cr>
xnoremap <leader>? "gy:call <SID>goog(@g, 0)<cr>gv
xnoremap <leader>! "gy:call <SID>goog(@g, 1)<cr>gv

" Toggle Status line
nnoremap <silent> <c-l> :call Toggle_laststatus()<cr>
" Insert Time
inoremap <c-s-t> <esc>:call Insert_time()<cr>""pa
" Toggle relative number
nnoremap <silent><leader>r :call Number_toggle()<cr>
" Toggle spell settings
nnoremap <leader>l :call Spell()<CR>
nnoremap <leader>t :call Insert_time()<cr>""p

" Create and edit file
nnoremap <silent> <Leader>h :nohl<CR>
nnoremap <leader>n :bn<cr>
nnoremap <leader>p :bp<cr>
nnoremap <leader>d :bd<cr>

" Command line Readline settings
cnoremap        <C-A> <Home>
cnoremap        <C-B> <Left>
cnoremap <expr> <C-D> getcmdpos()>strlen(getcmdline())?"\<Lt>C-D>":"\<Lt>Del>"
cnoremap <expr> <C-F> getcmdpos()>strlen(getcmdline())?&cedit:"\<Lt>Right>"
cnoremap        <M-b> <S-Left>
cnoremap        <M-f> <S-Right>
silent! exe "set <S-Left>=\<Esc>b"
silent! exe "set <S-Right>=\<Esc>f"
"
" Turn on spell cheking for filetypes
autocmd FileType latex,tex,md,markdown,gitcommit setlocal spell spelllang=en_gb
command! Root call s:root()
command! Preview :call Preview()
" autocmd BufWritePre * call LastModified()
autocmd InsertEnter * :setlocal nohlsearch
"
"-------------- PLUGIN Settings ----------------------"
"
set rtp+=/Users/chand/.linuxbrew/opt/fzf
"FZF-keybindings
nnoremap <leader>b :Buffers<cr>
" nnoremap <leader>f :Files<cr>
" nnoremap <leader>gf :GFiles<cr>
nnoremap <leader>f :call GFilesFallback()<CR>
nnoremap <leader>/ :Rg<CR>
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinPos = "right"

let g:airline_theme='gruvbox'
" let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" autogroup
augroup inp_ft
  au!
  autocmd BufNewFile,BufRead *.inp   set ft=sh
augroup END

let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_python_interpreter_path = '~/pyenvs/anaconda3/bin/python'
let g:ycm_python_sys_path = ['~/pyenvs/anaconda3/lib/python3.7/site-packages']
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_global_ycm_extra_conf = '~/dotfiles/vim/plugged/global_extra_conf.py'

