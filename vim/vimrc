"Vim Run Command File
"--------------------
set encoding=utf-8
scriptencoding utf-8
set nocompatible
unlet! skip_defaults_vim
" move the sourcing (tiny bit slower load time)
" source ~/dotfiles/vim/fzf_functions.vim
" source ~/dotfiles/vim/functions.vim
call plug#begin('~/.vim/plugged')
  Plug 'junegunn/fzf.vim'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-repeat'
  " Plug 'ervandew/supertab'
  Plug 'Valloric/YouCompleteMe'
  Plug 'vim-airline/vim-airline'
  Plug 'morhetz/gruvbox'
  Plug 'scrooloose/nerdtree'
  " Plug 'majutsushi/tagbar'
  " Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
call plug#end()
" Swap, Undo and Backup files
if exists('$SUDO_USER')
    set nobackup
    set noswapfile
    set nowritebackup
    set noundofile
else
    let g:netrw_home=$HOME.'/.config/'
    set directory=$HOME/.config/vimswap//
    set backupdir=$HOME/.config/vimswap//
    set viewdir=$HOME/.config/views//
    set undofile "poor man's version controll
endif

if has("persistent_undo")
    set undodir=$HOME/.config/vimswap//
    set undofile
endif
" Remember last cursor position (vim & nvim do this differently)
"" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.nviminfo

"" Color Settings (compatable to gruvbox)
syntax on
filetype plugin indent on
set background=dark
colorscheme gruvbox
let g:gruvbox_contrast_dark = 'hard'
hi String ctermfg=67
hi CursorLine ctermbg=236
hi Todo ctermbg=236
" TODO "ctermfg=231
hi link fortranOperator fortranKeyword
" hi VisualNOS    ctermfg=255 ctermbg=60

set number
" set relativenumber
set showmatch
set backspace=indent,eol,start
set clipboard=unnamed
" set laststatus=1
set autoindent
set expandtab
set shiftround
set shiftwidth=2
set smartindent
set softtabstop=2
set tabstop=2
" Folding setting
" set fdm=indent
" set nowrap
set wrap
set scrolloff=3
set shortmess=filnxtToOI
set cursorline
" set nocursorline
set formatoptions+=1
set mouse=a
set path+=**
set wildmenu
set list
set listchars=nbsp:⦸
set listchars+=tab:▸\
set listchars+=tab:\ \
" set listchars+=eol:¬
set listchars+=extends:❯
set listchars+=precedes:❮
"set listchars+=trail:␣
" set fillchars+=vert:\|
set fillchars+=vert:\│ "dont remove the space from here
set nojoinspaces
set diffopt=filler,vertical
set splitright
set splitbelow
set omnifunc=syntaxcomplete#Complete
" set tags=tags;$HOME

if has('linebreak')
    set linebreak
    let &showbreak='↳ '
    "set breakindentopt=shift:2
endif

set visualbell t_vb=
set hidden
set autoread

" Search Settings
set hlsearch
set ignorecase
set smartcase
set incsearch

let mapleader ="\<Space>"
let maplocalleader = "\,"
"window switch
nnoremap <leader><leader> <c-w>
vnoremap < <gv
vnoremap > >gv

" nnoremap j gj
" nnoremap k gk
nnoremap ^ g^
nnoremap 0 g0
nnoremap $ g$
" nnoremap gj j
" nnoremap gk k
nnoremap g^ ^
nnoremap g$ $
nnoremap g0 0

" terminal mode Maps
" tnoremap <> <C-\><C-n> "anything except <esc>!!

" Custome function Maps
nnoremap <silent><leader>zz :call Trim_trailing()<cr>
"
":Root | Change directory to the root of the Git repository
function! s:root()
  let root = systemlist('git rev-parse --show-toplevel')[0]
  if v:shell_error
    echo 'Not in git repo'
  else
    execute 'lcd' root
    echo 'Changed directory to: '.root
  endif
endfunction

"" <Leader>?/! | Google it / Feeling lucky
function! s:goog(pat, lucky)
  let q = '"'.substitute(a:pat, '["\n]', ' ', 'g').'"'
  let q = substitute(q, '[[:punct:] ]',
      \ '\=printf("%%%02X", char2nr(submatch(0)))', 'g')
  call system(printf('firefox "https://www.google.com/search?%sq=%s%s"',
                  \ a:lucky ? 'btnI&' : '', q, a:lucky ? '+'.&filetype : ''))
endfunction

nnoremap <leader>? :call <SID>goog(expand("<cWORD>"), 0)<cr>
nnoremap <leader>! :call <SID>goog(expand("<cWORD>"), 1)<cr>
xnoremap <leader>? "gy:call <SID>goog(@g, 0)<cr>gv
xnoremap <leader>! "gy:call <SID>goog(@g, 1)<cr>gv

" Toggle Status line
nnoremap <silent> <c-l> :call Toggle_laststatus()<cr>
" Insert Time
inoremap <c-s-t> <esc>:call Insert_time()<cr>""pa
" Toggle relative number
" nnoremap <silent><leader>r :call Number_toggle()<cr>
" Toggle spell settings
" nnoremap <leader>l :call Spell()<CR> "replaced by unimpared as =os
" nnoremap <leader>t :call Insert_time()<cr>""p

" Create and edit file
" nnoremap <silent> <Leader>h :nohl<CR>
" nnoremap <leader>n :bn<cr> "replaced by unimpared as ]b
" nnoremap <leader>p :bp<cr> "replaced by unimpaired [b
nnoremap <leader>n :tabnext<cr>
nnoremap <leader>p :tabprevious<cr>
nnoremap <leader>d :bd<cr>

" Command line Readline settings
cnoremap        <C-A> <Home>
cnoremap        <C-B> <Left>
cnoremap <expr> <C-D> getcmdpos()>strlen(getcmdline())?"\<Lt>C-D>":"\<Lt>Del>"
cnoremap <expr> <C-F> getcmdpos()>strlen(getcmdline())?&cedit:"\<Lt>Right>"
cnoremap        <M-b> <S-Left>
cnoremap        <M-f> <S-Right>
silent! exe "set <S-Left>=\<Esc>b"
silent! exe "set <S-Right>=\<Esc>f"
"
" Turn on spell cheking for filetypes
autocmd FileType latex,tex,md,markdown,gitcommit setlocal spell spelllang=en_gb
command! Root call s:root()
command! Preview :call Preview()
" autocmd BufWritePre * call LastModified()
autocmd InsertEnter * :setlocal nohlsearch
"
" autogroup
augroup inp_ft
  au!
  autocmd BufNewFile,BufRead *.inp   set ft=sh
augroup END

"-------------- PLUGIN Settings ----------------------"
"
" Fugitive
"delete buffer on leave
autocmd BufReadPost fugitive://* set bufhidden=delete
"
" FZF
set rtp+=/Users/chand/.linuxbrew/opt/fzf
"FZF-keybindings
nnoremap <silent> <leader>f :call GFilesFallback()<CR>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>/ :Rg<CR>
nnoremap <leader>t :Tags<CR>
" nnoremap <leader>f :Files<cr>
" nnoremap <leader>gf :GFiles<cr>
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)
"
" NERDTree
map <c-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinPos = "right"
"
" Airline/PowerLine
let g:airline_theme='gruvbox'
" let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
"
" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_python_interpreter_path = '~/pyenvs/anaconda3/bin/python'
let g:ycm_python_sys_path = ['~/pyenvs/anaconda3/lib/python3.7/site-packages']
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_global_ycm_extra_conf = '~/dotfiles/vim/plugged/global_extra_conf.py'
" Additional functions
nmap <leader>sp :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
 " Remember cursor position
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END


" Remove extra whitespace
function! Trim_trailing()
    if search('\s\+$', 'cnw')
        :%s/\s\+$//g
    endif
endfunction


" If buffer modified, update any 'Last modified: ' in the first 20 lines.
function! LastModified()
  if &modified
    let save_cursor = getpos(".")
    let n = min([20, line("$")])
    keepjumps exe '1,' . n . 's#^\(.\{,10}Last Modified: \).*#\1' .
          \ strftime('%d-%m-%Y %H:%M') . '#e'
    call histdel('search', -1)
    call setpos('.', save_cursor)
  endif
endfun
"
function! Insert_time()
  ":put =strftime(\"%d-%m-%Y %H:%M:%S \")
  let timestamp = strftime('%d-%m-%Y %H:%M')
  let @"=timestamp
endfunction

" Toggle laststatus between 1<->2
function! Toggle_laststatus()
  if &laststatus == 2
    set laststatus=1
  elseif &laststatus == 1
    set laststatus=2
  endif
  return
endfunction

" Toggle relative numbering
function! Number_toggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunction

"Spelling toggle
function! Spell()
  if !&spell
    set spell spelllang=en_gb
  else
    set nospell
  endif
endfunction

" Preview file in browser
function! Preview()
    "silent execute "!open -a 'firefox' " . shellescape(expand('%'))
    silent execute "!firefox " . shellescape(expand('%'))
endfunction

" FZF functions


let g:fzf_tags_command = 'ctags --extra=+f -R'

" let g:fzf_layout = { 'window': 'enew' }
" let g:fzf_layout = { 'window': '-tabnew' }
" let g:fzf_layout = { 'window': '12split enew' }
" " Override Colors command. You can safely do this in your .vimrc as fzf.vim
" will not override existing commands.
" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
  " \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  " \ 'border':  ['fg', 'my_border'],
command! -bang Colors
  \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'}, <bang>0)

command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

function! GFilesFallback()
  let output = system('git rev-parse --show-toplevel') " faster way to find git repo TODO
  let prefix = get(g:, 'fzf_command_prefix', '')
  if v:shell_error == 0
    exec "normal :" . prefix . "GFiles\<CR>"
  else
    exec "normal :" . prefix . "Files\<CR>"
  endif
  return 0
endfunction

